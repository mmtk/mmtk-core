searchState.loadedDescShard("mmtk", 1, "For weak reference types, if the referent is cleared …\nReturn the alignment offset when an object is copied.\nReturn the alignment when an object is copied.\nReturn the size used by an object.\nLoad the object reference.\nReturn the reference that an object will be referred to …\nGet the referent from a weak reference object.\nReturn the size when an object is copied.\nGet the type descriptor for an object.\nReturn whether there is a mutator created and associated …\nKeep the heap references in the finalizable object alive. …\nReturn a <code>Mutator</code> reference for the thread.\nReturn an iterator that includes all the mutators at the …\nMMTk calls this method at the first time during a …\nReturn the total count of mutators.\nPrepare for another round of root scanning in the same GC. …\nReturn the header base address from an object reference. …\nReturn the lowest address of the storage associated with …\nResume all the mutator threads, the opposite of the above. …\nDelegated scanning of a object, visiting each reference …\nScan one mutator for stack roots.\nScan VM-specific roots. The creation of all root scan …\nStore the object reference.\nSet the referent in a weak reference object.\nThis module provides the trait <code>Slot</code> and related traits and …\nAsk the VM to spawn a GC thread for MMTk. A GC thread may …\nStop all the mutator threads. MMTk calls this method when …\nReturn whether the VM supports return barriers. This is …\nCall this function to trace through an object graph edge …\nCall this function for each slot.\nCreate a temporary <code>ObjectTracer</code> and provide access in the …\nVM-specific methods for the current plan.\nReturn whether there is a mutator created and associated …\nReturn a <code>Mutator</code> reference for the thread.\nReturn an iterator that includes all the mutators at the …\nReturn the total count of mutators.\nThe fallback for object tracing. MMTk generally expects to …\nThe fallback for object tracing. MMTk generally expects to …\nVM-specific methods for garbage collection.\nThread context for the spawned GC thread.  It is used by …\nThe GC thread to spawn is a worker thread. There can be …\nBlock the current thread for GC. This is called when an …\nAsk the binding to create a <code>GCTriggerPolicy</code> if the option …\nAsk the binding to create a <code>GCTriggerPolicy</code> if the option …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCallback function to ask the VM whether GC is enabled or …\nCallback function to ask the VM whether GC is enabled or …\nInform the VM of an out-of-memory error. The binding …\nInform the VM of an out-of-memory error. The binding …\nA hook for the VM to do work after forwarding objects.\nA hook for the VM to do work after forwarding objects.\nResume all the mutator threads, the opposite of the above. …\nInform the VM to schedule finalization threads.\nInform the VM to schedule finalization threads.\nAsk the VM to spawn a GC thread for MMTk. A GC thread may …\nStop all the mutator threads. MMTk calls this method when …\nReturn the amount of memory (in bytes) which the VM …\nReturn the amount of memory (in bytes) which the VM …\nA global 1-bit metadata used by generational plans to …\nA local 2-bit metadata for the forwarding status bits, …\nA local word-size metadata for the forwarding pointer, …\nA local 2-bit metadata used by the large object space to …\nA local 1-bit metadata for the mark bit, used by most …\nA local 1-bit metadata specification for the pinning bit, …\nSet this to true if the VM binding requires the valid …\nSet this to true if the VM binding requires the valid …\nFor our allocation result (object_start), the binding may …\nVM-specific methods for object model.\nIf this is true, the binding guarantees that the object …\nIf this is true, the binding guarantees that the object …\nThis is the worst case expansion that can occur due to …\nThis is the worst case expansion that can occur due to …\nA function to atomically compare-and-exchange the …\nA function to atomically compare-and-exchange the …\nCopy an object and return the address of the new object. …\nCopy an object. This is required for delayed-copy …\nDump debugging information for an object.\nA function to atomically perform an add operation on the …\nA function to atomically perform an add operation on the …\nA function to atomically perform a bit-and operation on …\nA function to atomically perform a bit-and operation on …\nA function to atomically perform a bit-or operation on the …\nA function to atomically perform a bit-or operation on the …\nA function to atomically perform a subtract operation on …\nA function to atomically perform a subtract operation on …\nA function to atomically perform an update operation on …\nA function to atomically perform an update operation on …\nReturn the alignment offset when an object is copied.\nReturn the alignment when an object is copied.\nReturn the size used by an object.\nReturn the reference that an object will be referred to …\nReturn the size when an object is copied.\nGet the type descriptor for an object.\nReturn if an object is valid from the runtime point of …\nReturn if an object is valid from the runtime point of …\nA function to non-atomically load the specified per-object …\nA function to non-atomically load the specified per-object …\nA function to atomically load the specified per-object …\nA function to atomically load the specified per-object …\nReturn the header base address from an object reference. …\nReturn the lowest address of the storage associated with …\nA function to non-atomically store a value to the …\nA function to non-atomically store a value to the …\nA function to atomically store a value to the specified …\nA function to atomically store a value to the specified …\nWhether this spec is global or local. For side metadata, …\nWhether this spec is global or local. For side metadata, …\nWhether this spec is global or local. For side metadata, …\nWhether this spec is global or local. For side metadata, …\nWhether this spec is global or local. For side metadata, …\nWhether this spec is global or local. For side metadata, …\nThe number of bits (in log2) that are needed for the spec.\nThe number of bits (in log2) that are needed for the spec.\nThe number of bits (in log2) that are needed for the spec.\nThe number of bits (in log2) that are needed for the spec.\nThe number of bits (in log2) that are needed for the spec.\nThe number of bits (in log2) that are needed for the spec.\n1-bit global metadata to log an object.\n2-bit local metadata for spaces that store a forwarding …\n1-word local metadata for spaces that may copy objects. …\n2-bits local metadata for the large object space. The two …\n1-bit local metadata for spaces that need to mark an …\n1-bit local metadata for spaces that support pinning.\nReturn the inner <code>[crate::util::metadata::MetadataSpec]</code> for …\nReturn the inner <code>[crate::util::metadata::MetadataSpec]</code> for …\nReturn the inner <code>[crate::util::metadata::MetadataSpec]</code> for …\nReturn the inner <code>[crate::util::metadata::MetadataSpec]</code> for …\nReturn the inner <code>[crate::util::metadata::MetadataSpec]</code> for …\nReturn the inner <code>[crate::util::metadata::MetadataSpec]</code> for …\nClear the unlog bit to log object (0 means logged)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeclare that the VM uses in-header metadata for this …\nDeclare that the VM uses in-header metadata for this …\nDeclare that the VM uses in-header metadata for this …\nDeclare that the VM uses in-header metadata for this …\nDeclare that the VM uses in-header metadata for this …\nDeclare that the VM uses in-header metadata for this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTest if the mark bit for the object is set (1)\nCheck if an object is pinned.\nCheck if the log bit represents the unlogged state (the …\nSet the mark bit for the object to 1\nMark the log bit as unlogged (1 means unlogged)\nMark the entire byte as unlogged if the log bit is in the …\nReturn the number of bits for the metadata type.\nReturn the number of bits for the metadata type.\nReturn the number of bits for the metadata type.\nReturn the number of bits for the metadata type.\nReturn the number of bits for the metadata type.\nReturn the number of bits for the metadata type.\nPin an object by setting the pinning bit to 1. Return true …\nDeclare that the VM uses side metadata for this metadata …\nDeclare that the VM uses side metadata for this metadata …\nDeclare that the VM uses side metadata for this metadata …\nDeclare that the VM uses side metadata for this metadata …\nDeclare that the VM uses side metadata for this metadata …\nDeclare that the VM uses side metadata for this metadata …\nDeclare that the VM uses side metadata for this metadata …\nDeclare that the VM uses side metadata for this metadata …\nDeclare that the VM uses side metadata for this metadata …\nDeclare that the VM uses side metadata for this metadata …\nDeclare that the VM uses side metadata for this metadata …\nDeclare that the VM uses side metadata for this metadata …\nUnpin an object by clearing the pinning bit to 0. Return …\nA finalizable object for MMTk. MMTk needs to know the …\nThe type of finalizable objects. This type is used when …\nVM-specific methods for reference processing, including …\nWeak and soft references always clear the referent before …\nFor weak reference types, if the referent is cleared …\nLoad the object reference.\nGet the referent from a weak reference object.\nKeep the heap references in the finalizable object alive. …\nStore the object reference.\nSet the referent in a weak reference object.\nCallback trait of scanning functions that directly trace …\nAn <code>ObjectTracerContext</code> gives a GC worker temporary access …\nRoot-scanning methods use this trait to create work …\nVM-specific methods for scanning roots/objects.\nCallback trait of scanning functions that report slots.\nThe concrete <code>ObjectTracer</code> type.\nWhen set to <code>true</code>, all plans will guarantee that during …\nWhen set to <code>true</code>, all plans will guarantee that during …\nCreate work packets to handle non-transitively pinning …\nCreate work packets to handle non-pinned roots.  The roots …\nCreate work packets to handle transitively pinning (TP) …\nForward weak references.\nForward weak references.\nMMTk calls this method at the first time during a …\nPrepare for another round of root scanning in the same GC. …\nProcess weak references.\nProcess weak references.\nDelegated scanning of a object, visiting each reference …\nDelegated scanning of a object, visiting each reference …\nDelegated scanning of a object, visiting each reference …\nScan one mutator for stack roots.\nScan VM-specific roots. The creation of all root scan …\nReturn true if the given object supports slot enqueuing.\nReturn true if the given object supports slot enqueuing.\nReturn whether the VM supports return barriers. This is …\nCall this function to trace through an object graph edge …\nCall this function for each slot.\nCreate a temporary <code>ObjectTracer</code> and provide access in the …\nIterate slots within <code>Range&lt;Address&gt;</code>.\nA abstract memory slice represents a piece of <strong>heap</strong> memory …\nA simple slot implementation that represents a word-sized …\nA <code>Slot</code> represents a slot in an object (a.k.a. a field), on …\nThe associate type to define how to iterate slots in a …\nThe associate type to define how to access slots from a …\nMemory slice type with empty implementations. For VMs that …\nSlot iterator for <code>UnimplementedMemorySlice</code>.\nGet the address of the slot.\nSize of the memory slice\nMemory copy support\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a simple slot from an address.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate object slots within the slice. If there are …\nLoad object reference from the slot.\nThe object which this slice belongs to. If we know the …\nPrefetch the slot so that a subsequent <code>load</code> will be faster.\nPrefetch the slot so that a subsequent <code>store</code> will be …\nStart address of the memory slice\nStore the object reference <code>object</code> into the slot.")