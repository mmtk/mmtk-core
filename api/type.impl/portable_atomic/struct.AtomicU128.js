(function() {
    var type_impls = Object.fromEntries([["mmtk",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AtomicU128\" class=\"impl\"><a href=\"#impl-AtomicU128\" class=\"anchor\">§</a><h3 class=\"code-header\">impl AtomicU128</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">new</a>(v: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a>) -&gt; AtomicU128</h4></section></summary><div class=\"docblock\"><p>Creates a new atomic integer.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::AtomicU128;\n\n<span class=\"kw\">let </span>atomic_forty_two = AtomicU128::new(<span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ptr\" class=\"method\"><h4 class=\"code-header\">pub const unsafe fn <a class=\"fn\">from_ptr</a>&lt;'a&gt;(ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a>) -&gt; &amp;'a AtomicU128</h4></section></summary><div class=\"docblock\"><p>Creates a new reference to an atomic integer from a pointer.</p>\n<p>This is <code>const fn</code> on Rust 1.83+.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<ul>\n<li><code>ptr</code> must be aligned to <code>align_of::&lt;AtomicU128&gt;()</code> (note that on some platforms this\ncan be bigger than <code>align_of::&lt;u128&gt;()</code>).</li>\n<li><code>ptr</code> must be <a href=\"https://doc.rust-lang.org/1.83.0/core/ptr/index.html#safety\" title=\"mod core::ptr\">valid</a> for both reads and writes for the whole lifetime <code>'a</code>.</li>\n<li>If this atomic type is <a href=\"Self::is_lock_free\">lock-free</a>, non-atomic accesses to the value\nbehind <code>ptr</code> must have a happens-before relationship with atomic accesses via\nthe returned value (or vice-versa).\n<ul>\n<li>In other words, time periods where the value is accessed atomically may not\noverlap with periods where the value is accessed non-atomically.</li>\n<li>This requirement is trivially satisfied if <code>ptr</code> is never used non-atomically\nfor the duration of lifetime <code>'a</code>. Most use cases should be able to follow\nthis guideline.</li>\n<li>This requirement is also trivially satisfied if all accesses (atomic or not) are\ndone from the same thread.</li>\n</ul>\n</li>\n<li>If this atomic type is <em>not</em> lock-free:\n<ul>\n<li>Any accesses to the value behind <code>ptr</code> must have a happens-before relationship\nwith accesses via the returned value (or vice-versa).</li>\n<li>Any concurrent accesses to the value behind <code>ptr</code> for the duration of lifetime <code>'a</code> must\nbe compatible with operations performed by this atomic type.</li>\n</ul>\n</li>\n<li>This method must not be used to create overlapping or mixed-size atomic\naccesses, as these are not supported by the memory model.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_lock_free\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_lock_free</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if operations on values of this type are lock-free.</p>\n<p>If the compiler or the platform doesn’t support the necessary\natomic instructions, global locks for every potentially\nconcurrent atomic operation will be used.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::AtomicU128;\n\n<span class=\"kw\">let </span>is_lock_free = AtomicU128::is_lock_free();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_always_lock_free\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">is_always_lock_free</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if operations on values of this type are lock-free.</p>\n<p>If the compiler or the platform doesn’t support the necessary\natomic instructions, global locks for every potentially\nconcurrent atomic operation will be used.</p>\n<p><strong>Note:</strong> If the atomic operation relies on dynamic CPU feature detection,\nthis type may be lock-free even if the function returns false.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::AtomicU128;\n\n<span class=\"kw\">const </span>IS_ALWAYS_LOCK_FREE: bool = AtomicU128::is_always_lock_free();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">get_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the underlying integer.</p>\n<p>This is safe because the mutable reference guarantees that no other threads are\nconcurrently accessing the atomic data.</p>\n<p>This is <code>const fn</code> on Rust 1.83+.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::{AtomicU128, Ordering};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>some_var = AtomicU128::new(<span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>some_var.get_mut(), <span class=\"number\">10</span>);\n<span class=\"kw-2\">*</span>some_var.get_mut() = <span class=\"number\">5</span>;\n<span class=\"macro\">assert_eq!</span>(some_var.load(Ordering::SeqCst), <span class=\"number\">5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_inner\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">into_inner</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a></h4></section></summary><div class=\"docblock\"><p>Consumes the atomic and returns the contained value.</p>\n<p>This is safe because passing <code>self</code> by value guarantees that no other threads are\nconcurrently accessing the atomic data.</p>\n<p>This is <code>const fn</code> on Rust 1.56+.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::AtomicU128;\n\n<span class=\"kw\">let </span>some_var = AtomicU128::new(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(some_var.into_inner(), <span class=\"number\">5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">load</a>(&amp;self, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a></h4></section></summary><div class=\"docblock\"><p>Loads a value from the atomic integer.</p>\n<p><code>load</code> takes an <a href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering of this operation.\nPossible values are [<code>SeqCst</code>], [<code>Acquire</code>] and [<code>Relaxed</code>].</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>order</code> is [<code>Release</code>] or [<code>AcqRel</code>].</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::{AtomicU128, Ordering};\n\n<span class=\"kw\">let </span>some_var = AtomicU128::new(<span class=\"number\">5</span>);\n\n<span class=\"macro\">assert_eq!</span>(some_var.load(Ordering::Relaxed), <span class=\"number\">5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.store\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">store</a>(&amp;self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Stores a value into the atomic integer.</p>\n<p><code>store</code> takes an <a href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering of this operation.\nPossible values are [<code>SeqCst</code>], [<code>Release</code>] and [<code>Relaxed</code>].</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>order</code> is [<code>Acquire</code>] or [<code>AcqRel</code>].</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::{AtomicU128, Ordering};\n\n<span class=\"kw\">let </span>some_var = AtomicU128::new(<span class=\"number\">5</span>);\n\nsome_var.store(<span class=\"number\">10</span>, Ordering::Relaxed);\n<span class=\"macro\">assert_eq!</span>(some_var.load(Ordering::Relaxed), <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">swap</a>(&amp;self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a></h4></section></summary><div class=\"docblock\"><p>Stores a value into the atomic integer, returning the previous value.</p>\n<p><code>swap</code> takes an <a href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[<code>Acquire</code>] makes the store part of this operation [<code>Relaxed</code>], and\nusing [<code>Release</code>] makes the load part [<code>Relaxed</code>].</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::{AtomicU128, Ordering};\n\n<span class=\"kw\">let </span>some_var = AtomicU128::new(<span class=\"number\">5</span>);\n\n<span class=\"macro\">assert_eq!</span>(some_var.swap(<span class=\"number\">10</span>, Ordering::Relaxed), <span class=\"number\">5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare_exchange\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">compare_exchange</a>(\n    &amp;self,\n    current: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a>,\n    new: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a>,\n    success: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>,\n    failure: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Stores a value into the atomic integer if the current value is the same as\nthe <code>current</code> value.</p>\n<p>The return value is a result indicating whether the new value was written and\ncontaining the previous value. On success this value is guaranteed to be equal to\n<code>current</code>.</p>\n<p><code>compare_exchange</code> takes two <a href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> arguments to describe the memory\nordering of this operation. <code>success</code> describes the required ordering for the\nread-modify-write operation that takes place if the comparison with <code>current</code> succeeds.\n<code>failure</code> describes the required ordering for the load operation that takes place when\nthe comparison fails. Using [<code>Acquire</code>] as success ordering makes the store part\nof this operation [<code>Relaxed</code>], and using [<code>Release</code>] makes the successful load\n[<code>Relaxed</code>]. The failure ordering can only be [<code>SeqCst</code>], [<code>Acquire</code>] or [<code>Relaxed</code>].</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if <code>failure</code> is [<code>Release</code>], [<code>AcqRel</code>].</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::{AtomicU128, Ordering};\n\n<span class=\"kw\">let </span>some_var = AtomicU128::new(<span class=\"number\">5</span>);\n\n<span class=\"macro\">assert_eq!</span>(\n    some_var.compare_exchange(<span class=\"number\">5</span>, <span class=\"number\">10</span>, Ordering::Acquire, Ordering::Relaxed),\n    <span class=\"prelude-val\">Ok</span>(<span class=\"number\">5</span>),\n);\n<span class=\"macro\">assert_eq!</span>(some_var.load(Ordering::Relaxed), <span class=\"number\">10</span>);\n\n<span class=\"macro\">assert_eq!</span>(\n    some_var.compare_exchange(<span class=\"number\">6</span>, <span class=\"number\">12</span>, Ordering::SeqCst, Ordering::Acquire),\n    <span class=\"prelude-val\">Err</span>(<span class=\"number\">10</span>),\n);\n<span class=\"macro\">assert_eq!</span>(some_var.load(Ordering::Relaxed), <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare_exchange_weak\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">compare_exchange_weak</a>(\n    &amp;self,\n    current: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a>,\n    new: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a>,\n    success: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>,\n    failure: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Stores a value into the atomic integer if the current value is the same as\nthe <code>current</code> value.\nUnlike <a href=\"Self::compare_exchange\"><code>compare_exchange</code></a>\nthis function is allowed to spuriously fail even\nwhen the comparison succeeds, which can result in more efficient code on some\nplatforms. The return value is a result indicating whether the new value was\nwritten and containing the previous value.</p>\n<p><code>compare_exchange_weak</code> takes two <a href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> arguments to describe the memory\nordering of this operation. <code>success</code> describes the required ordering for the\nread-modify-write operation that takes place if the comparison with <code>current</code> succeeds.\n<code>failure</code> describes the required ordering for the load operation that takes place when\nthe comparison fails. Using [<code>Acquire</code>] as success ordering makes the store part\nof this operation [<code>Relaxed</code>], and using [<code>Release</code>] makes the successful load\n[<code>Relaxed</code>]. The failure ordering can only be [<code>SeqCst</code>], [<code>Acquire</code>] or [<code>Relaxed</code>].</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if <code>failure</code> is [<code>Release</code>], [<code>AcqRel</code>].</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::{AtomicU128, Ordering};\n\n<span class=\"kw\">let </span>val = AtomicU128::new(<span class=\"number\">4</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>old = val.load(Ordering::Relaxed);\n<span class=\"kw\">loop </span>{\n    <span class=\"kw\">let </span>new = old * <span class=\"number\">2</span>;\n    <span class=\"kw\">match </span>val.compare_exchange_weak(old, new, Ordering::SeqCst, Ordering::Relaxed) {\n        <span class=\"prelude-val\">Ok</span>(<span class=\"kw\">_</span>) =&gt; <span class=\"kw\">break</span>,\n        <span class=\"prelude-val\">Err</span>(x) =&gt; old = x,\n    }\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_add\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">fetch_add</a>(&amp;self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a></h4></section></summary><div class=\"docblock\"><p>Adds to the current value, returning the previous value.</p>\n<p>This operation wraps around on overflow.</p>\n<p><code>fetch_add</code> takes an <a href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[<code>Acquire</code>] makes the store part of this operation [<code>Relaxed</code>], and\nusing [<code>Release</code>] makes the load part [<code>Relaxed</code>].</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::{AtomicU128, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU128::new(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(foo.fetch_add(<span class=\"number\">10</span>, Ordering::SeqCst), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::SeqCst), <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">add</a>(&amp;self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Adds to the current value.</p>\n<p>This operation wraps around on overflow.</p>\n<p>Unlike <code>fetch_add</code>, this does not return the previous value.</p>\n<p><code>add</code> takes an <a href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[<code>Acquire</code>] makes the store part of this operation [<code>Relaxed</code>], and\nusing [<code>Release</code>] makes the load part [<code>Relaxed</code>].</p>\n<p>This function may generate more efficient code than <code>fetch_add</code> on some platforms.</p>\n<ul>\n<li>MSP430: <code>add</code> instead of disabling interrupts ({8,16}-bit atomics)</li>\n</ul>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::{AtomicU128, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU128::new(<span class=\"number\">0</span>);\nfoo.add(<span class=\"number\">10</span>, Ordering::SeqCst);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::SeqCst), <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_sub\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">fetch_sub</a>(&amp;self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a></h4></section></summary><div class=\"docblock\"><p>Subtracts from the current value, returning the previous value.</p>\n<p>This operation wraps around on overflow.</p>\n<p><code>fetch_sub</code> takes an <a href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[<code>Acquire</code>] makes the store part of this operation [<code>Relaxed</code>], and\nusing [<code>Release</code>] makes the load part [<code>Relaxed</code>].</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::{AtomicU128, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU128::new(<span class=\"number\">20</span>);\n<span class=\"macro\">assert_eq!</span>(foo.fetch_sub(<span class=\"number\">10</span>, Ordering::SeqCst), <span class=\"number\">20</span>);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::SeqCst), <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">sub</a>(&amp;self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Subtracts from the current value.</p>\n<p>This operation wraps around on overflow.</p>\n<p>Unlike <code>fetch_sub</code>, this does not return the previous value.</p>\n<p><code>sub</code> takes an <a href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[<code>Acquire</code>] makes the store part of this operation [<code>Relaxed</code>], and\nusing [<code>Release</code>] makes the load part [<code>Relaxed</code>].</p>\n<p>This function may generate more efficient code than <code>fetch_sub</code> on some platforms.</p>\n<ul>\n<li>MSP430: <code>sub</code> instead of disabling interrupts ({8,16}-bit atomics)</li>\n</ul>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::{AtomicU128, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU128::new(<span class=\"number\">20</span>);\nfoo.sub(<span class=\"number\">10</span>, Ordering::SeqCst);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::SeqCst), <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_and\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">fetch_and</a>(&amp;self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a></h4></section></summary><div class=\"docblock\"><p>Bitwise “and” with the current value.</p>\n<p>Performs a bitwise “and” operation on the current value and the argument <code>val</code>, and\nsets the new value to the result.</p>\n<p>Returns the previous value.</p>\n<p><code>fetch_and</code> takes an <a href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[<code>Acquire</code>] makes the store part of this operation [<code>Relaxed</code>], and\nusing [<code>Release</code>] makes the load part [<code>Relaxed</code>].</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::{AtomicU128, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU128::new(<span class=\"number\">0b101101</span>);\n<span class=\"macro\">assert_eq!</span>(foo.fetch_and(<span class=\"number\">0b110011</span>, Ordering::SeqCst), <span class=\"number\">0b101101</span>);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::SeqCst), <span class=\"number\">0b100001</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">and</a>(&amp;self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Bitwise “and” with the current value.</p>\n<p>Performs a bitwise “and” operation on the current value and the argument <code>val</code>, and\nsets the new value to the result.</p>\n<p>Unlike <code>fetch_and</code>, this does not return the previous value.</p>\n<p><code>and</code> takes an <a href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[<code>Acquire</code>] makes the store part of this operation [<code>Relaxed</code>], and\nusing [<code>Release</code>] makes the load part [<code>Relaxed</code>].</p>\n<p>This function may generate more efficient code than <code>fetch_and</code> on some platforms.</p>\n<ul>\n<li>x86/x86_64: <code>lock and</code> instead of <code>cmpxchg</code> loop ({8,16,32}-bit atomics on x86, but additionally 64-bit atomics on x86_64)</li>\n<li>MSP430: <code>and</code> instead of disabling interrupts ({8,16}-bit atomics)</li>\n</ul>\n<p>Note: On x86/x86_64, the use of either function should not usually\naffect the generated code, because LLVM can properly optimize the case\nwhere the result is unused.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::{AtomicU128, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU128::new(<span class=\"number\">0b101101</span>);\n<span class=\"macro\">assert_eq!</span>(foo.fetch_and(<span class=\"number\">0b110011</span>, Ordering::SeqCst), <span class=\"number\">0b101101</span>);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::SeqCst), <span class=\"number\">0b100001</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_nand\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">fetch_nand</a>(&amp;self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a></h4></section></summary><div class=\"docblock\"><p>Bitwise “nand” with the current value.</p>\n<p>Performs a bitwise “nand” operation on the current value and the argument <code>val</code>, and\nsets the new value to the result.</p>\n<p>Returns the previous value.</p>\n<p><code>fetch_nand</code> takes an <a href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[<code>Acquire</code>] makes the store part of this operation [<code>Relaxed</code>], and\nusing [<code>Release</code>] makes the load part [<code>Relaxed</code>].</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::{AtomicU128, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU128::new(<span class=\"number\">0x13</span>);\n<span class=\"macro\">assert_eq!</span>(foo.fetch_nand(<span class=\"number\">0x31</span>, Ordering::SeqCst), <span class=\"number\">0x13</span>);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::SeqCst), !(<span class=\"number\">0x13 </span>&amp; <span class=\"number\">0x31</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_or\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">fetch_or</a>(&amp;self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a></h4></section></summary><div class=\"docblock\"><p>Bitwise “or” with the current value.</p>\n<p>Performs a bitwise “or” operation on the current value and the argument <code>val</code>, and\nsets the new value to the result.</p>\n<p>Returns the previous value.</p>\n<p><code>fetch_or</code> takes an <a href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[<code>Acquire</code>] makes the store part of this operation [<code>Relaxed</code>], and\nusing [<code>Release</code>] makes the load part [<code>Relaxed</code>].</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::{AtomicU128, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU128::new(<span class=\"number\">0b101101</span>);\n<span class=\"macro\">assert_eq!</span>(foo.fetch_or(<span class=\"number\">0b110011</span>, Ordering::SeqCst), <span class=\"number\">0b101101</span>);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::SeqCst), <span class=\"number\">0b111111</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">or</a>(&amp;self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Bitwise “or” with the current value.</p>\n<p>Performs a bitwise “or” operation on the current value and the argument <code>val</code>, and\nsets the new value to the result.</p>\n<p>Unlike <code>fetch_or</code>, this does not return the previous value.</p>\n<p><code>or</code> takes an <a href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[<code>Acquire</code>] makes the store part of this operation [<code>Relaxed</code>], and\nusing [<code>Release</code>] makes the load part [<code>Relaxed</code>].</p>\n<p>This function may generate more efficient code than <code>fetch_or</code> on some platforms.</p>\n<ul>\n<li>x86/x86_64: <code>lock or</code> instead of <code>cmpxchg</code> loop ({8,16,32}-bit atomics on x86, but additionally 64-bit atomics on x86_64)</li>\n<li>MSP430: <code>or</code> instead of disabling interrupts ({8,16}-bit atomics)</li>\n</ul>\n<p>Note: On x86/x86_64, the use of either function should not usually\naffect the generated code, because LLVM can properly optimize the case\nwhere the result is unused.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::{AtomicU128, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU128::new(<span class=\"number\">0b101101</span>);\n<span class=\"macro\">assert_eq!</span>(foo.fetch_or(<span class=\"number\">0b110011</span>, Ordering::SeqCst), <span class=\"number\">0b101101</span>);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::SeqCst), <span class=\"number\">0b111111</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_xor\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">fetch_xor</a>(&amp;self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a></h4></section></summary><div class=\"docblock\"><p>Bitwise “xor” with the current value.</p>\n<p>Performs a bitwise “xor” operation on the current value and the argument <code>val</code>, and\nsets the new value to the result.</p>\n<p>Returns the previous value.</p>\n<p><code>fetch_xor</code> takes an <a href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[<code>Acquire</code>] makes the store part of this operation [<code>Relaxed</code>], and\nusing [<code>Release</code>] makes the load part [<code>Relaxed</code>].</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::{AtomicU128, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU128::new(<span class=\"number\">0b101101</span>);\n<span class=\"macro\">assert_eq!</span>(foo.fetch_xor(<span class=\"number\">0b110011</span>, Ordering::SeqCst), <span class=\"number\">0b101101</span>);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::SeqCst), <span class=\"number\">0b011110</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.xor\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">xor</a>(&amp;self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Bitwise “xor” with the current value.</p>\n<p>Performs a bitwise “xor” operation on the current value and the argument <code>val</code>, and\nsets the new value to the result.</p>\n<p>Unlike <code>fetch_xor</code>, this does not return the previous value.</p>\n<p><code>xor</code> takes an <a href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[<code>Acquire</code>] makes the store part of this operation [<code>Relaxed</code>], and\nusing [<code>Release</code>] makes the load part [<code>Relaxed</code>].</p>\n<p>This function may generate more efficient code than <code>fetch_xor</code> on some platforms.</p>\n<ul>\n<li>x86/x86_64: <code>lock xor</code> instead of <code>cmpxchg</code> loop ({8,16,32}-bit atomics on x86, but additionally 64-bit atomics on x86_64)</li>\n<li>MSP430: <code>xor</code> instead of disabling interrupts ({8,16}-bit atomics)</li>\n</ul>\n<p>Note: On x86/x86_64, the use of either function should not usually\naffect the generated code, because LLVM can properly optimize the case\nwhere the result is unused.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::{AtomicU128, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU128::new(<span class=\"number\">0b101101</span>);\nfoo.xor(<span class=\"number\">0b110011</span>, Ordering::SeqCst);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::SeqCst), <span class=\"number\">0b011110</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_update\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">fetch_update</a>&lt;F&gt;(\n    &amp;self,\n    set_order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>,\n    fetch_order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>,\n    f: F,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a>&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Fetches the value, and applies a function to it that returns an optional\nnew value. Returns a <code>Result</code> of <code>Ok(previous_value)</code> if the function returned <code>Some(_)</code>, else\n<code>Err(previous_value)</code>.</p>\n<p>Note: This may call the function multiple times if the value has been changed from other threads in\nthe meantime, as long as the function returns <code>Some(_)</code>, but the function will have been applied\nonly once to the stored value.</p>\n<p><code>fetch_update</code> takes two <a href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> arguments to describe the memory ordering of this operation.\nThe first describes the required ordering for when the operation finally succeeds while the second\ndescribes the required ordering for loads. These correspond to the success and failure orderings of\n<a href=\"Self::compare_exchange\"><code>compare_exchange</code></a> respectively.</p>\n<p>Using [<code>Acquire</code>] as success ordering makes the store part\nof this operation [<code>Relaxed</code>], and using [<code>Release</code>] makes the final successful load\n[<code>Relaxed</code>]. The (failed) load ordering can only be [<code>SeqCst</code>], [<code>Acquire</code>] or [<code>Relaxed</code>].</p>\n<h5 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">§</a>Panics</h5>\n<p>Panics if <code>fetch_order</code> is [<code>Release</code>], [<code>AcqRel</code>].</p>\n<h5 id=\"considerations\"><a class=\"doc-anchor\" href=\"#considerations\">§</a>Considerations</h5>\n<p>This method is not magic; it is not provided by the hardware.\nIt is implemented in terms of <a href=\"Self::compare_exchange_weak\"><code>compare_exchange_weak</code></a>,\nand suffers from the same drawbacks.\nIn particular, this method will not circumvent the <a href=\"https://en.wikipedia.org/wiki/ABA_problem\">ABA Problem</a>.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::{AtomicU128, Ordering};\n\n<span class=\"kw\">let </span>x = AtomicU128::new(<span class=\"number\">7</span>);\n<span class=\"macro\">assert_eq!</span>(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |<span class=\"kw\">_</span>| <span class=\"prelude-val\">None</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">7</span>));\n<span class=\"macro\">assert_eq!</span>(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| <span class=\"prelude-val\">Some</span>(x + <span class=\"number\">1</span>)), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">7</span>));\n<span class=\"macro\">assert_eq!</span>(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| <span class=\"prelude-val\">Some</span>(x + <span class=\"number\">1</span>)), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">8</span>));\n<span class=\"macro\">assert_eq!</span>(x.load(Ordering::SeqCst), <span class=\"number\">9</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_max\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">fetch_max</a>(&amp;self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a></h4></section></summary><div class=\"docblock\"><p>Maximum with the current value.</p>\n<p>Finds the maximum of the current value and the argument <code>val</code>, and\nsets the new value to the result.</p>\n<p>Returns the previous value.</p>\n<p><code>fetch_max</code> takes an <a href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[<code>Acquire</code>] makes the store part of this operation [<code>Relaxed</code>], and\nusing [<code>Release</code>] makes the load part [<code>Relaxed</code>].</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::{AtomicU128, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU128::new(<span class=\"number\">23</span>);\n<span class=\"macro\">assert_eq!</span>(foo.fetch_max(<span class=\"number\">42</span>, Ordering::SeqCst), <span class=\"number\">23</span>);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::SeqCst), <span class=\"number\">42</span>);</code></pre></div>\n<p>If you want to obtain the maximum value in one step, you can use the following:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::{AtomicU128, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU128::new(<span class=\"number\">23</span>);\n<span class=\"kw\">let </span>bar = <span class=\"number\">42</span>;\n<span class=\"kw\">let </span>max_foo = foo.fetch_max(bar, Ordering::SeqCst).max(bar);\n<span class=\"macro\">assert!</span>(max_foo == <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_min\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">fetch_min</a>(&amp;self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a></h4></section></summary><div class=\"docblock\"><p>Minimum with the current value.</p>\n<p>Finds the minimum of the current value and the argument <code>val</code>, and\nsets the new value to the result.</p>\n<p>Returns the previous value.</p>\n<p><code>fetch_min</code> takes an <a href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[<code>Acquire</code>] makes the store part of this operation [<code>Relaxed</code>], and\nusing [<code>Release</code>] makes the load part [<code>Relaxed</code>].</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::{AtomicU128, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU128::new(<span class=\"number\">23</span>);\n<span class=\"macro\">assert_eq!</span>(foo.fetch_min(<span class=\"number\">42</span>, Ordering::Relaxed), <span class=\"number\">23</span>);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::Relaxed), <span class=\"number\">23</span>);\n<span class=\"macro\">assert_eq!</span>(foo.fetch_min(<span class=\"number\">22</span>, Ordering::Relaxed), <span class=\"number\">23</span>);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::Relaxed), <span class=\"number\">22</span>);</code></pre></div>\n<p>If you want to obtain the minimum value in one step, you can use the following:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::{AtomicU128, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU128::new(<span class=\"number\">23</span>);\n<span class=\"kw\">let </span>bar = <span class=\"number\">12</span>;\n<span class=\"kw\">let </span>min_foo = foo.fetch_min(bar, Ordering::SeqCst).min(bar);\n<span class=\"macro\">assert_eq!</span>(min_foo, <span class=\"number\">12</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_set\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">bit_set</a>(&amp;self, bit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u32.html\">u32</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Sets the bit at the specified bit-position to 1.</p>\n<p>Returns <code>true</code> if the specified bit was previously set to 1.</p>\n<p><code>bit_set</code> takes an <a href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[<code>Acquire</code>] makes the store part of this operation [<code>Relaxed</code>], and\nusing [<code>Release</code>] makes the load part [<code>Relaxed</code>].</p>\n<p>This corresponds to x86’s <code>lock bts</code>, and the implementation calls them on x86/x86_64.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::{AtomicU128, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU128::new(<span class=\"number\">0b0000</span>);\n<span class=\"macro\">assert!</span>(!foo.bit_set(<span class=\"number\">0</span>, Ordering::Relaxed));\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::Relaxed), <span class=\"number\">0b0001</span>);\n<span class=\"macro\">assert!</span>(foo.bit_set(<span class=\"number\">0</span>, Ordering::Relaxed));\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::Relaxed), <span class=\"number\">0b0001</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_clear\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">bit_clear</a>(&amp;self, bit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u32.html\">u32</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Clears the bit at the specified bit-position to 1.</p>\n<p>Returns <code>true</code> if the specified bit was previously set to 1.</p>\n<p><code>bit_clear</code> takes an <a href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[<code>Acquire</code>] makes the store part of this operation [<code>Relaxed</code>], and\nusing [<code>Release</code>] makes the load part [<code>Relaxed</code>].</p>\n<p>This corresponds to x86’s <code>lock btr</code>, and the implementation calls them on x86/x86_64.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::{AtomicU128, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU128::new(<span class=\"number\">0b0001</span>);\n<span class=\"macro\">assert!</span>(foo.bit_clear(<span class=\"number\">0</span>, Ordering::Relaxed));\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::Relaxed), <span class=\"number\">0b0000</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bit_toggle\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">bit_toggle</a>(&amp;self, bit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u32.html\">u32</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Toggles the bit at the specified bit-position.</p>\n<p>Returns <code>true</code> if the specified bit was previously set to 1.</p>\n<p><code>bit_toggle</code> takes an <a href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[<code>Acquire</code>] makes the store part of this operation [<code>Relaxed</code>], and\nusing [<code>Release</code>] makes the load part [<code>Relaxed</code>].</p>\n<p>This corresponds to x86’s <code>lock btc</code>, and the implementation calls them on x86/x86_64.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::{AtomicU128, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU128::new(<span class=\"number\">0b0000</span>);\n<span class=\"macro\">assert!</span>(!foo.bit_toggle(<span class=\"number\">0</span>, Ordering::Relaxed));\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::Relaxed), <span class=\"number\">0b0001</span>);\n<span class=\"macro\">assert!</span>(foo.bit_toggle(<span class=\"number\">0</span>, Ordering::Relaxed));\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::Relaxed), <span class=\"number\">0b0000</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_not\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">fetch_not</a>(&amp;self, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a></h4></section></summary><div class=\"docblock\"><p>Logical negates the current value, and sets the new value to the result.</p>\n<p>Returns the previous value.</p>\n<p><code>fetch_not</code> takes an <a href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[<code>Acquire</code>] makes the store part of this operation [<code>Relaxed</code>], and\nusing [<code>Release</code>] makes the load part [<code>Relaxed</code>].</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::{AtomicU128, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU128::new(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(foo.fetch_not(Ordering::Relaxed), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::Relaxed), !<span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.not\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">not</a>(&amp;self, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Logical negates the current value, and sets the new value to the result.</p>\n<p>Unlike <code>fetch_not</code>, this does not return the previous value.</p>\n<p><code>not</code> takes an <a href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[<code>Acquire</code>] makes the store part of this operation [<code>Relaxed</code>], and\nusing [<code>Release</code>] makes the load part [<code>Relaxed</code>].</p>\n<p>This function may generate more efficient code than <code>fetch_not</code> on some platforms.</p>\n<ul>\n<li>x86/x86_64: <code>lock not</code> instead of <code>cmpxchg</code> loop ({8,16,32}-bit atomics on x86, but additionally 64-bit atomics on x86_64)</li>\n<li>MSP430: <code>inv</code> instead of disabling interrupts ({8,16}-bit atomics)</li>\n</ul>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::{AtomicU128, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU128::new(<span class=\"number\">0</span>);\nfoo.not(Ordering::Relaxed);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::Relaxed), !<span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch_neg\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">fetch_neg</a>(&amp;self, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a></h4></section></summary><div class=\"docblock\"><p>Negates the current value, and sets the new value to the result.</p>\n<p>Returns the previous value.</p>\n<p><code>fetch_neg</code> takes an <a href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[<code>Acquire</code>] makes the store part of this operation [<code>Relaxed</code>], and\nusing [<code>Release</code>] makes the load part [<code>Relaxed</code>].</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::{AtomicU128, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU128::new(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(foo.fetch_neg(Ordering::Relaxed), <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::Relaxed), <span class=\"number\">5_u128</span>.wrapping_neg());\n<span class=\"macro\">assert_eq!</span>(foo.fetch_neg(Ordering::Relaxed), <span class=\"number\">5_u128</span>.wrapping_neg());\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::Relaxed), <span class=\"number\">5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">neg</a>(&amp;self, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Negates the current value, and sets the new value to the result.</p>\n<p>Unlike <code>fetch_neg</code>, this does not return the previous value.</p>\n<p><code>neg</code> takes an <a href=\"https://doc.rust-lang.org/1.83.0/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\"><code>Ordering</code></a> argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[<code>Acquire</code>] makes the store part of this operation [<code>Relaxed</code>], and\nusing [<code>Release</code>] makes the load part [<code>Relaxed</code>].</p>\n<p>This function may generate more efficient code than <code>fetch_neg</code> on some platforms.</p>\n<ul>\n<li>x86/x86_64: <code>lock neg</code> instead of <code>cmpxchg</code> loop ({8,16,32}-bit atomics on x86, but additionally 64-bit atomics on x86_64)</li>\n</ul>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>portable_atomic::{AtomicU128, Ordering};\n\n<span class=\"kw\">let </span>foo = AtomicU128::new(<span class=\"number\">5</span>);\nfoo.neg(Ordering::Relaxed);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::Relaxed), <span class=\"number\">5_u128</span>.wrapping_neg());\nfoo.neg(Ordering::Relaxed);\n<span class=\"macro\">assert_eq!</span>(foo.load(Ordering::Relaxed), <span class=\"number\">5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable pointer to the underlying integer.</p>\n<p>Returning an <code>*mut</code> pointer from a shared reference to this atomic is\nsafe because the atomic types work with interior mutability. Any use of\nthe returned raw pointer requires an <code>unsafe</code> block and has to uphold\nthe safety requirements. If there is concurrent access, note the following\nadditional safety requirements:</p>\n<ul>\n<li>If this atomic type is <a href=\"Self::is_lock_free\">lock-free</a>, any concurrent\noperations on it must be atomic.</li>\n<li>Otherwise, any concurrent operations on it must be compatible with\noperations performed by this atomic type.</li>\n</ul>\n<p>This is <code>const fn</code> on Rust 1.58+.</p>\n</div></details></div></details>",0,"mmtk::policy::sft_map::AtomicDoubleWord"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-AtomicU128\" class=\"impl\"><a href=\"#impl-Debug-for-AtomicU128\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for AtomicU128</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","mmtk::policy::sft_map::AtomicDoubleWord"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-AtomicU128\" class=\"impl\"><a href=\"#impl-Default-for-AtomicU128\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for AtomicU128</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; AtomicU128</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.83.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","mmtk::policy::sft_map::AtomicDoubleWord"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu128%3E-for-AtomicU128\" class=\"impl\"><a href=\"#impl-From%3Cu128%3E-for-AtomicU128\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a>&gt; for AtomicU128</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(v: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u128.html\">u128</a>) -&gt; AtomicU128</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<u128>","mmtk::policy::sft_map::AtomicDoubleWord"],["<section id=\"impl-RefUnwindSafe-for-AtomicU128\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-AtomicU128\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/panic/unwind_safe/trait.RefUnwindSafe.html\" title=\"trait core::panic::unwind_safe::RefUnwindSafe\">RefUnwindSafe</a> for AtomicU128</h3></section>","RefUnwindSafe","mmtk::policy::sft_map::AtomicDoubleWord"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[70261]}