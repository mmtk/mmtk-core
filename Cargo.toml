[package]
name = "mmtk"
version = "0.15.0"
authors = ["The MMTk Developers <>"]
edition = "2021"
license = "MIT OR Apache-2.0"
description = "MMTk is a framework for the design and implementation of high-performance and portable memory managers."
homepage = "https://www.mmtk.io"
repository = "https://github.com/mmtk/mmtk-core"
readme = "README.md"
categories = ["memory-management"]
keywords = ["gc", "garbage", "collection", "garbage-collection", "allocation"]
rust-version = "1.57.0"
build = "build.rs"

[lib]
name = "mmtk"
crate-type = ["rlib"]
doctest = false

[dependencies]
# MMTk macros
mmtk-macros = { version = "0.15.0", path = "macros/" }

libc = "0.2"
jemalloc-sys = { version = "0.3.2", features = ["disable_initial_exec_tls"], optional = true }
mimalloc-sys = { version = "0.1.6", optional = true }
hoard-sys = { version = "0.1.2", optional = true }
lazy_static = "1.1"
log = { version = "0.4", features = ["max_level_trace", "release_max_level_off"] }
crossbeam = "0.8.1"
num_cpus = "1.8"
enum-map = "=2.1"
downcast-rs = "1.1.1"
atomic-traits = "0.2.0"
atomic = "0.5.1"
num-traits = "0.2"
spin = "0.5.2"
env_logger = "0.8.2"
pfm = { version = "0.1.0-beta.1", optional = true }
atomic_refcell = "0.1.7"
strum = "0.24"
strum_macros = "0.24"
cfg-if = "1.0"
itertools = "0.10.5"

[dev-dependencies]
rand = "0.7.3"
paste = "1.0.8"

[build-dependencies]
built = { version = "0.5.1", features = ["git2"] }

[features]
default = []

# This feature is only supported on x86-64 for now
# It's manually added to CI scripts
perf_counter = ["pfm"]

# .github/scripts/ci-common.sh extracts features from the following part (including from comments).
# So be careful when editing or adding stuff to the section below.


# Do not modify the following line - ci-common.sh matches it
# -- Non mutually exclusive features --

# spaces with different semantics

# A VM-allocated/managed space. A binding could use this for their boot image, metadata space, etc.
# FIXME: This is not properly implemented yet (it is only working for JikesRVM): https://github.com/mmtk/mmtk-core/issues/415
# If a binding would need to trace/scan objects that is allocated and managed by the VM, `ActivePlan::vm_trace_object()` is an alternative.
vm_space = []

# A readonly space.
# TODO: This is not properly implemented yet. We currently use an immortal space instead, and do not guarantee read-only semantics.
ro_space = []
# A code space with execution permission.
# TODO: This is not properly implemented yet. We currently use an immortal space instead, and all our spaces have execution permission at the moment.
code_space  = []

# metadata
global_alloc_bit = []

# conservative garbage collection support
is_mmtk_object = ["global_alloc_bit"]

# Enable object pinning, in particular, enable pinning/unpinning, and its metadata
object_pinning = []

# The following two features are useful for using Immix for VMs that do not support moving GC.

# Disable defragmentation for ImmixSpace.  This makes Immix a non-moving plan.
immix_no_defrag = []
# Reduce block size for ImmixSpace.  This mitigates fragmentation when defrag is disabled.
immix_smaller_block = []

# Run sanity GC
sanity = []
# Run analysis
analysis = []
# Use lock free variant of NoGC
nogc_lock_free = []
# Use lock free with no zeroing NoGC
nogc_no_zeroing = ["nogc_lock_free"]
# For using a single GC thread
# Q: Why do we need this as a compile time flat? We can always set the number of GC threads through options.
single_worker = []

# To run expensive comprehensive runtime checks, such as checking duplicate edges
extreme_assertions = []

# Enable multiple spaces for NoGC, each allocator maps to an individual ImmortalSpace.
nogc_multi_space = []

# To collect statistics for each GC work packet. Enabling this may introduce a small overhead (several percentage slowdown on benchmark time).
work_packet_stats = []

# Count the malloc'd memory into the heap size
malloc_counted_size = []

# Do not modify the following line - ci-common.sh matches it
# -- Mutally exclusive features --
# Only one feature from each group can be provided. Otherwise build will fail.

# Name of the mutualy exclusive feature group. ci-common.sh matches lines like this one.
# Group:malloc
# only one of the following features should be enabled, or none to use the default malloc from libc
# this does not replace the global Rust allocator, but provides these libraries for GC implementation
malloc_mimalloc = ["mimalloc-sys"]
malloc_jemalloc = ["jemalloc-sys"]
malloc_hoard = ["hoard-sys"]
# Use the native mimalloc allocator for malloc. This is not tested by me (Yi) yet, and it is only used to make sure that some code
# is not compiled in default builds.
malloc_native_mimalloc = []

# If there are more groups, they should be inserted above this line
# Group:end

# Group:marksweepallocation
# default is native allocator with lazy sweeping
eager_sweeping = []
# Use library malloc as the freelist allocator for mark sweep. This will makes mark sweep slower. As malloc may return addresses outside our
# normal heap range, we will have to use chunk-based SFT table. Turning on this feature will use a different SFT map implementation on 64bits,
# and will affect all the plans in the build. Please be aware of the consequence, and this is only meant to be experimental use.
malloc_mark_sweep = []
# Group:end
